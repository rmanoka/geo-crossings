initSidebarItems({"mod":[["area","Calculate the area of the surface of a `Geometry`."],["bearing","Calculate the bearing to another `Point`, in degrees."],["bounding_rect","Calculate the bounding rectangle of a `Geometry`."],["centroid","Calculate the centroid of a `Geometry`."],["chamberlain_duquette_area","Calculate the signed approximate geodesic area of a `Geometry`."],["closest_point","Calculate the closest `Point` between a `Geometry` and an input `Point`."],["concave_hull","Calculate the concave hull of a `Geometry`."],["contains","Determine whether `Geometry` `A` is completely enclosed by `Geometry` `B`."],["convex_hull","Calculate the convex hull of a `Geometry`."],["coordinate_position","Determine whether a `Coordinate` lies inside, outside, or on the boundary of a geometry."],["coords_iter","Iterate over geometry coordinates."],["dimensions","Dimensionality of a geometry and its boundary, based on OGC-SFA."],["euclidean_distance","Calculate the minimum Euclidean distance between two `Geometries`."],["euclidean_length","Calculate the length of a planar line between two `Geometries`."],["extremes","Calculate the extreme coordinates and indices of a geometry."],["frechet_distance","Calculate the Frechet distance between two `LineStrings`."],["geodesic_distance","Calculate the Geodesic distance between two `Point`s."],["geodesic_intermediate","Calculate a new `Point` lying on a Geodesic arc between two `Point`s."],["geodesic_length","Calculate the Geodesic length of a line."],["haversine_destination","Calculate a destination `Point`, given a distance and a bearing."],["haversine_distance","Calculate the Haversine distance between two `Geometries`."],["haversine_intermediate","Calculate a new `Point` lying on a Great Circle arc between two `Point`s."],["haversine_length","Calculate the Haversine length of a Line."],["intersects","Determine whether `Geometry` `A` intersects `Geometry` `B`."],["is_convex","Determines whether a `LineString` is convex."],["kernels","Kernels to compute various predicates"],["line_interpolate_point","Interpolate a point along a `Line` or `LineString`."],["line_intersection","Computes the intersection of two Lines."],["line_locate_point","Locate a point along a `Line` or `LineString`."],["map_coords","Apply a function to all `Coordinates` of a `Geometry`."],["orient","Orient a `Polygon`â€™s exterior and interior rings."],["relate","Relate two geometries based on DE-9IM"],["rotate","Rotate a `Geometry` around either its centroid or a `Point` by an angle given in degrees."],["simplify","Simplify `Geometries` using the Ramer-Douglas-Peucker algorithm."],["simplifyvw","Simplify `Geometries` using the Visvalingam-Whyatt algorithm. Includes a topology-preserving variant."],["translate","Translate a `Geometry` along the given offsets."],["vincenty_distance","Calculate the Vincenty distance between two `Point`s."],["vincenty_length","Calculate the Vincenty length of a `LineString`."],["winding_order","Calculate and work with the winding order of `Linestring`s."]]});